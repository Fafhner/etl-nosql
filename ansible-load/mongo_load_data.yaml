---
#############################
- hosts: cluster_node_manager
  tasks:
    - name: Manager - remove stack
      ansible.builtin.command: "docker stack rm {{db['docker_stack_name']}}"
      tags: tag_prepare
      ignore_errors: true

    - name: Manager - remove network
      ansible.builtin.command: "docker network rm {{db['network_name']}}"
      tags: tag_prepare
      ignore_errors: true

- hosts: cluster_node_workers
  tasks:
    - name: Workers - Leave cluster
      ansible.builtin.command: "docker swarm leave"
      tags: tag_prepare
      ignore_errors: true


- hosts: cluster_node_manager
  tasks:
    - name: Manager - Leave cluster
      ansible.builtin.command: "docker swarm leave --force"
      tags: tag_prepare
      ignore_errors: true

###############################

- hosts: cluster_node_manager:cluster_node_workers
  tasks:
    - name: Create folder for shards
      file:
        path: "/home/magisterka/etl-nosql/db/mongodb/{{mongo_catalog}}/{{cluster_size}}/{{scale}}/shard/db"
        state: directory


- hosts: cluster_node_manager
  tasks:
    - name: Create folder for config server
      file:
        path: "/home/magisterka/etl-nosql/db/mongodb/{{mongo_catalog}}/{{cluster_size}}/{{scale}}/config/db"
        state: directory
      tags: tag_files

    - name: Create folder for router
      file:
        path: "/home/magisterka/etl-nosql/db/mongodb/{{mongo_catalog}}/{{cluster_size}}/{{scale}}/router/db"
        state: directory
      tags: tag_files

###############################

- hosts: cluster_node_manager
  tasks:
    - name: Restore files, change parameters
      block:
        - name: Create docker compose
          ansible.builtin.command: "python3 create_docker_compose.py {{cluster_size}} . {{scale}} {{mongo_catalog}}"
          args:
            chdir: "{{docker_compose_path}}"

      tags: tag_files

###############################

- hosts: cluster_node_manager
  tasks:
    - name: Init docker swarm node manager
      block:
        - name: Init swarm
          ansible.builtin.command:  docker swarm init

        - name: Register swarm worker token
          ansible.builtin.command: docker swarm join-token -q worker
          register: cluster_token
      tags: tag_init_swarm


- hosts: cluster_node_workers
  tasks:
    - name: Init docker swarm workers
      block:
        - name: Init swarm workers
          ansible.builtin.command:  "docker swarm join --token {{ hostvars[cluster['node_manager']]['cluster_token'].stdout }} {{cluster['node_manager']}}:2377"
      tags: tag_init_swarm

###############################

- hosts: cluster_node_manager
  tasks:
    - name: Create docker network
      ansible.builtin.command: "docker network create -d overlay {{ db['network_name'] }}"
      tags: tag_deploy_stack
      ignore_errors: true

    - name: Docker stack up
      ansible.builtin.command: "docker stack deploy -c {{docker_compose_path}}/docker-compose.yaml {{db['docker_stack_name']}}"
      tags: tag_deploy_stack

    - name: Wait for containers
      pause:
        seconds: 15
      tags: tag_deploy_stack

- hosts: cluster_node_manager:cluster_node_workers
  tasks:
    - name: Get shards container id
      ansible.builtin.command: "docker ps -q --filter name={{db['docker_stack_name']}}_shard* "
      register: shard_id
      until: result.stdout != ''
      retries: 5
      delay: 10
      tags: tag_deploy_stack, tag_init_shard

    - name: Init shards
      ansible.builtin.command: "docker exec {{shard_id.stdout}} sh -c 'mongo < /scripts/init-shard'"
      tags: tag_deploy_stack, tag_init_shard


- hosts: cluster_node_manager
  tasks:
    - name: Get config server container id
      ansible.builtin.command: "docker ps -q --filter name={{db['docker_stack_name']}}_config* "
      register: config_id
      tags: tag_deploy_stack, tag_init_config

    - name: Init config server
      ansible.builtin.command: "docker exec {{config_id.stdout}} sh -c 'mongo < /scripts/init-config'"
      tags: tag_deploy_stack, tag_init_config

    - name: Wait for config server init
      pause:
        seconds: 15
      tags: tag_deploy_stack

    - name: Get router container id
      ansible.builtin.command: "docker ps -q --filter name={{db['docker_stack_name']}}_router* "
      register: router_id
      tags: tag_deploy_stack

    - name: Init router
      ansible.builtin.command: "docker exec {{router_id.stdout}} sh -c 'mongo < /scripts/init-router'"
      register: result
      until: result.stdout.find("failed") == -1
      retries: 5
      delay: 10
      tags: tag_deploy_stack

    - name: Init db and collection
      ansible.builtin.command: "docker exec {{router_id.stdout}} sh -c 'mongo < /scripts/init-coll'"
      tags: tag_deploy_stack, tag_init_coll

    - name: Load data
      ansible.builtin.command: "docker exec {{router_id.stdout}} mongoimport --db=db --collection={{item}} --file=/importdata/{{item}}.json"
      loop: "{{tables_schema}}"
      tags: tag_load_data






