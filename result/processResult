import uuid
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import numpy as np
import pandas as pd


def fig_box(names, rk, rd, po, data_np, data_pp):
    fig = make_subplots(rows=2, cols=len(data_np))

    for i in range(len(data_np)):
        fig.add_trace(go.Box(y=data_np[i], x=[names[i]]*len(data_np[i]), name='brak push-down',
                             showlegend=False if i>0 else True, boxmean='sd', marker_color='#3D9970'),
                      row=1, col=i + 1)

    for i in range(len(data_pp)):
        fig.add_trace(go.Box(y=data_pp[i], x=[names[i]]*len(data_pp[i]), name='z push-down',
                             showlegend=False if i>0 else True, boxmean='sd', marker_color='#FF4136'),
                      row=2, col=i + 1)
        fig.update_xaxes(title_text="UDF", row=2, col=i + 1, title_standoff=5)

    fig.update_yaxes(title_text="Czas[s]", row=1, col=1, title_standoff=5)
    fig.update_yaxes(title_text="Czas[s]", row=2, col=1, title_standoff=5)

    fig.update_layout(
        title=f'Eksperyment - rozmiar klastra: {rk},<br>'
              f'{"&#160;" * 14}rozmiar danych: {rd}[GB],<br>'
              f'{"&#160;" * 14}przyznana pamięć cache: {po}[GB]',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(
            family="Courier New",
            size=8
        )
    )

    return fig


def fig_bars(names, np_, pp_, rk, rd, po):
    fig = go.Figure(data=[
        go.Bar(name='UDF - bez push-down', x=names, y=np_['mean'], error_y=dict(
            type='data',
            array=np_['std'],
            visible=True)),
        go.Bar(name='UDF - z push-down', x=names, y=pp_['mean'], error_y=dict(
            type='data',
            array=pp_['std'],
            visible=True))
    ])
    fig.update_layout(
        title=f'Eksperyment - rozmiar klastra: {rk},<br>'
              f'{"&#160;" * 14}rozmiar danych: {rd}[GB],<br>'
              f'{"&#160;" * 14}przyznana pamięć cache: {po}[GB]',
        plot_bgcolor='rgba(0,0,0,0)',
        yaxis_title='Czas[s]',
        xaxis_title='UDF',
        barmode='group',
        font=dict(
            family="Courier New",
            size=8
        )
    )
    return fig


def create_bars(df):
    df_data = []
    dfg = df.groupby(['udf', 'rk', 'po', 'rd'])

    for name, group in dfg:
        mean = np.mean(group['time'])
        std = np.std(group['time'])
        q1 = np.quantile(group['time'], 0.25)
        q3 = np.quantile(group['time'], 0.75)
        median = np.median(group['time'])
        data = group['time'].to_list()
        df_data.append([*name, mean, std, q1, median, q3, data])

    df_mean_std = pd.DataFrame(df_data, columns=['udf', 'rk', 'po', 'rd', 'mean', 'std', 'q1', 'median', 'q3', 'data'])

    dfg2 = df_mean_std.groupby(['rk', 'po', 'rd'])

    for name, group in dfg2:
        is_np = group['udf'].str.endswith('np')
        np_ = group[is_np]
        pp_ = group[~is_np]
        names = group['udf'].apply(lambda x: x[:-3]).unique()
        params = group.iloc[0]
        rk, po, rd = params['rk'], params['po'], params['rd']

        img_id = str(uuid.uuid4())
        img_id_bar = img_id + "_bar"
        img_id_box = img_id + "_box"

        f_bar = fig_bars(names, np_, pp_, rk, rd, int(po / 1000))
        f_bar.write_image(f"images/cass/e/{img_id_bar}.svg")
        f_box = fig_box(names, rk, rd, int(po / 1000), list(np_['data']), list(pp_['data']))
        f_box.write_image(f"images/cass/e/{img_id_box}.svg")

        latex_df = group.copy().drop('data', axis=1)
        latex_df['po'] = latex_df.po.apply(lambda x: int(x / 1000))

        latex_image_text = r"""
\begin{{figure}}[h]
            \centering
            \includegraphics[width=0.9\linewidth]{{images/cass/e/{0}}}
            \caption{{{1}}}
            \label{{img/{0}}}
\end{{figure}}
"""
        latex_table = latex_df.to_latex(index=False,
                                        column_format='c|ccc|ccccc',
                                        float_format="%.2f",
                                        caption=f"Table danych dla rysunków "
                                                f"\\ref{{img/{img_id_bar}}} i \\ref{{img/{img_id_box}}}")

        latex_text = [r"\newpage\clearpage",
                      latex_image_text.format(img_id_bar, "Wykresy przedstawiające średnie czasy wykonania UDF wraz z "
                                                          "odchyleniem standardowym."),
                      latex_image_text.format(img_id_box, ""),
                      latex_table]

        with open('latex.tex', 'a', encoding='UTF-8') as tex:
            tex.write("\n".join(latex_text))


if __name__ == '__main__':
    df_csv = pd.read_csv('data.csv')
    df2 = df_csv
    dfg_ = df2.groupby(['udf', 'rk', 'po', 'rd'])


    def drop_min_man(t):
        tmin = t.time[t.time > t.time.min()]
        tmax = tmin[tmin < t.time.max()]
        return tmax


    df3 = dfg_.apply(drop_min_man).reset_index()
    create_bars(df3)

    #
    # animals = ['giraffes', 'orangutans', 'monkeys']
    #
    # fig = go.Figure(data=[
    #     go.Bar(name='SF Zoo', x=['giraffes'], y=[20]),
    #     go.Bar(name='LA Zoo', x=['giraffes'], y=[12]),
    #     go.Bar(name='SF Zoo', x=['orangutans'], y=[14]),
    #     go.Bar(name='LA Zoo', x=['orangutans'], y=[18]),
    #     go.Bar(name='SF Zoo', x=['monkeys'], y=[23]),
    #     go.Bar(name='LA Zoo', x=['monkeys'], y=[29])
    # ])
    # # Change the bar mode
    # fig.update_layout(barmode='group')
    # fig.show()

    # with open('data.csv', 'w') as csv:
    #     csv.write(",".join(k) + "\n")
    #     for udf_r in l_udf_r:
    #         for try_ in udf_r['tries'].values():
    #             s = udf_r['scenario']
    #             csv.write(",".join([udf_r['udf'], str(s['cluster_size']), str(s['java_xms']),
    #                                 str(s['scale']), str(try_['overall_time'])]) + "\n")
    #         etl_time, etl_std, aq_time, ov_time = sum_time(udf_r['tries'])
    #
    #         d = [udf_r['udf']] + list(udf_r['scenario'].values()) + ['{0:.2f}'.format(etl_time), '{0:.2f}'.format(etl_std), '{0:.2f}'.format(aq_time), '{0:.2f}'.format(ov_time)]
    #         x.append(", ".join([str(_) for _ in d]))
    #
    # print("\n".join(x))
    #
    # df = pd.DataFrame(x, columns=k)
    # print(df.sort_values(by=['udf', 'rep_factor', 'java_xms']))
